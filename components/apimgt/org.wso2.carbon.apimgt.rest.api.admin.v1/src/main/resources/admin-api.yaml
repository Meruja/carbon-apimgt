#   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "v1.2"
  title: "WSO2 API Manager - Admin"
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - Admin Portal.
    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.wso2.com

# The base path of the API.
# Will be prefixed to all paths.
basePath: /api/am/admin/v1

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specfied in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces:
  - application/json

securityDefinitions:
  OAuth2Security:
    type: oauth2
    flow: password
    tokenUrl: https://localhost:9443/oauth2/token
    scopes:
      openid: Authorize access to user details
      apim:admin: Manage all admin operations
      apim:tier_view: View throttling policies
      apim:tier_manage: Update and delete throttling policies
      apim:bl_view: View deny policies
      apim:bl_manage: Update and delete deny policies
      apim:mediation_policy_view: View mediation policies
      apim:mediation_policy_create: Create and update mediation policies
      apim:app_owner_change: Retrieve and manage applications
      apim:app_import_export: Import and export applications related operations
      apim:api_import_export: Import and export APIs related operations
      apim:api_product_import_export: Import and export API Products related operations
      apim:label_manage: Manage microgateway labels
      apim:label_read: Retrieve microgateway labels
      apim:monetization_usage_publish: Retrieve and publish Monetization related usage records
      apim:api_workflow_approve: Manage workflows
      apim:bot_data: Retrieve bot detection data
      apim:tenantInfo: Retrieve tenant related information
      apim:tenant_theme_manage: Manage tenant themes
      apim:admin_operations: Manage API categories
      apim:admin_settings: Retrieve admin settings
      apim:admin_alert_manage: Manage admin alerts
      apim:api_workflow_view: Retrive workflow requests
      apim:scope_manage: Manage scope

######################################################
# The "API Collection" resource APIs
######################################################
paths:
######################################################
# The "Application Throttling Policy Collection" resource API
######################################################
  '/throttling/policies/application':

#-----------------------------------------------------
# Retrieve all Application level policies
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/applications-policy/applications_policy.yaml#/getAllApplicationThrottlingPolicies
      summary: Get all Application Throttling Policies
      description: |
        Retrieves all existing application throttling policies.
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Application Policy (Collection)
      responses:
        200:
          description: |
            OK.
            Policies returned
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicyList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add a Application level Throttling Policy
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/applications-policy/applications_policy.yaml#/addApplicationThrottlingPolicy
      summary: Add an Application Throttling Policy
      description: |
        This operation can be used to add a new application level throttling policy.
      parameters:
        - in: body
          name: body
          description: |
            Application level policy object that should to be added
          required: true
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Application Policy (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicy'
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.

######################################################
# The "Individual Application Throttling Policy" resource API
######################################################
  '/throttling/policies/application/{policyId}':

#-----------------------------------------------------
# Retrieve a certain Application Policy
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/applications-policy/applications_policy.yaml#/getApplicationPolicyById
      summary: Get an Application Policy
      description: |
        Retrieves an Application Policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy returned
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicy'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Tier does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete an Application level throttling policy
#-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/applications-policy/applications_policy.yaml#/deleteApplicationThrottlingPolicyById
      summary: Delete an Application Throttling policy
      description: |
        Deletes an Application level throttling policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update an Application throttling policy
#-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/applications-policy/applications_policy.yaml#/updateApplicationThrottlingPolicyById
      summary: Update an Application Throttling policy
      description: |
        Updates an existing Application level throttling policy. Upon succesfull, you will receive the updated application policy as the response.
      parameters:
        - $ref: '#/parameters/policyId'
        - in: body
          name: body
          description: |
            Policy object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Application Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy updated.
          schema:
            $ref: '#/definitions/ApplicationThrottlePolicy'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional request.
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional reuquests.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

  /policies/mediation:
#-----------------------------------------------------------------------------------------
# Retrieving the list of all global mediation sequences under a given search condition
#-----------------------------------------------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:mediation_policy_view
      x-examples:
        $ref: docs/examples/mediation-policy/mediation_policy.yaml#/getAllMediationPolicies
      summary: |
        Get all global mediation policies
      description: |
        This operation provides you a list of available all global level mediation policies.
      parameters:
        - $ref : '#/parameters/limit'
        - $ref : '#/parameters/offset'
        - name : query
          in: query
          description: "-Not supported yet-"
          type: string
        - $ref : "#/parameters/Accept"
        - $ref : "#/parameters/If-None-Match"
      tags:
        - Mediation Policy (Collection)
      responses:
        200:
          description: |
            OK.
            List of mediation policies is returned.
          schema:
            $ref: '#/definitions/mediationList'
          headers:
            Content-Type:
              description: The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'


#----------------------------------------------------------------------------
# Upload a global mediation policy
#----------------------------------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:mediation_policy_create
      x-examples:
        $ref: docs/examples/mediation-policy/mediation_policy.yaml#/addGlobalMediationPolicy
      summary: Add a global mediation policy
      description: |
        This operation can be used to add a new global mediation policy.
      parameters:
        - in: body
          name: body
          description: mediation policy to upload
          required: true
          schema:
             $ref: '#/definitions/Mediation'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Collection)
      responses:
        200:
          description: |
            OK.
            Mediation policy added successfully.
          schema:
            $ref : '#/definitions/Mediation'
          headers:
            Location:
              description: |
                The URL of the uploaded thumbnail image of the API.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Individual global mediation sequence" resource
######################################################
  /policies/mediation/{mediationPolicyId}:

#-----------------------------------------------------
# Retrieve a particular global mediation policy
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:mediation_policy_view
      x-examples:
        $ref: docs/examples/mediation-policy/mediation_policy.yaml#/retrieveParticularGlobalMediationPolicy
      summary: Get a global mediation policy
      description: |
        This operation can be used to retrieve a particular global mediation policy.
      parameters:
        - $ref: '#/parameters/mediationPolicyId'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Mediation Policy returned.
          schema:
            $ref: '#/definitions/Mediation'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Document does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete the mediation policy
#-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:mediation_policy_create
      x-examples:
        $ref: docs/examples/mediation-policy/mediation_policy.yaml#/deleteGlobalMediationPolicyById
      summary: Delete a global mediation policy
      description: |
        This operation can be used to delete an existing global mediation policy providing the Id of the mediation policy.
      parameters:
        - $ref: '#/parameters/mediationPolicyId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Mediation policy successfully deleted.
        403:
          description: |
            Forbidden.
            The request must be conditional but no condition has been specified.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update the a mediation policy
#-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:mediation_policy_create
      x-examples:
        $ref: docs/examples/mediation-policy/mediation_policy.yaml#/updateGlobalMediationPolicyById
      summary: Update a global mediation policy
      description: |
        This operation can be used to update an existing global mediation policy.
      parameters:
        - $ref: '#/parameters/mediationPolicyId'
        - in: body
          name: body
          description: |
            Mediation policy object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Mediation'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Mediation Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Successful response with updated mediation policy object
          schema:
            $ref: '#/definitions/Mediation'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource. Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        403:
          description: |
            Forbidden.
            The request must be conditional but no condition has been specified.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'
######################################################
# The "Subscription Throttling Policy Collection" resource API
######################################################
  '/throttling/policies/subscription':

#-----------------------------------------------------
# Retrieve all Subscription level policies
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/subscription-policy/subscription_policy.yaml#/getAllSubscriptionPolicy
      summary: Get all Subscription Throttling Policies
      description: |
        This operation can be used to retrieve all Subscription level throttling policies.
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Subscription Policy (Collection)
      responses:
        200:
          description: |
            OK.
            Policies returned
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicyList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add a Subscription level Throttling Policy
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/subscription-policy/subscription_policy.yaml#/addSubscriptionThrottlingPolicy
      summary: Add a Subscription Throttling Policy
      description: |
        This operation can be used to add a Subscription level throttling policy specifying the details of the policy in the payload.
      parameters:
        - in: body
          name: body
          description: |
            Subscripion level policy object that should to be added
          required: true
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Subscription Policy (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicy'
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.

######################################################
# The "Individual Subscription Throttling Policy" resource API
######################################################
  '/throttling/policies/subscription/{policyId}':

#-----------------------------------------------------
# Retrieve a certain Subscription Policy
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/subscription-policy/subscription_policy.yaml#/getSubscriptionPolicyById
      summary: Get a Subscription Policy
      description: |
        Retrieve a single subscription-level throttling policy. We should provide the Id of the policy as a path parameter.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy returned
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicy'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Policy does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a Subscription level throttling policy
#-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/subscription-policy/subscription_policy.yaml#/deleteSubscriptionPolicyById
      summary: Delete a Subscription Policy
      description: |
        This operation can be used to delete a subscription-level throttling policy specifying the Id of the policy as a path paramter.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a Subscription Throttling Policy
#-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/subscription-policy/subscription_policy.yaml#/updateSubscriptionPolicyById
      summary: Update a Subscription Policy
      description: |
        Updates an existing subscription-level throttling policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - in: body
          name: body
          description: |
            Policy object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Subscription Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy updated.
          schema:
            $ref: '#/definitions/SubscriptionThrottlePolicy'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Custom Rule Collection" resource API
######################################################
  '/throttling/policies/custom':

#-----------------------------------------------------
# Retrieve all Custom Rules
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/custom-rules/custom_rules.yaml#/getAllCustomRules
      summary: Get all Custom Rules
      description: |
        Retrieves all Custom Rules.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Custom Rules (Collection)
      responses:
        200:
          description: |
            OK.
            Policies returned
          schema:
            $ref: '#/definitions/CustomRuleList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add a Custom Rule
#-----------------------------------------------------
    post:
      x-examples:
        $ref: docs/examples/custom-rules/custom_rules.yaml#/addCustomRule
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      summary: Add a Custom Rule
      description: |
        Adds a new Custom Rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - in: body
          name: body
          description: |
            Custom Rule object that should to be added
          required: true
          schema:
            $ref: '#/definitions/CustomRule'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Custom Rules (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/CustomRule'
          headers:
            Location:
              description: |
                Location of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.

######################################################
# The "Individual Custom Rule" resource API
######################################################
  '/throttling/policies/custom/{ruleId}':

#-----------------------------------------------------
# Retrieve a certain Custom Rule
#-----------------------------------------------------
    get:
      x-examples:
        $ref: docs/examples/custom-rules/custom_rules.yaml#/getCustomRuleById
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      summary: Get a Custom Rule
      description: |
        Retrieves a Custom Rule. We need to provide the policy Id as a path parameter.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/parameters/ruleId'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        200:
          description: |
            OK.
            Policy returned
          schema:
            $ref: '#/definitions/CustomRule'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Policy does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a Custom Rule
#-----------------------------------------------------
    delete:
      x-examples:
        $ref: docs/examples/custom-rules/custom_rules.yaml#/deleteCustomRuleById
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      summary: Delete a Custom Rule
      description: |
        Delete a Custom Rule. We need to provide the Id of the policy as a path parameter.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/parameters/ruleId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a Custom Rule
#-----------------------------------------------------
    put:
      x-examples:
        $ref: docs/examples/custom-rules/custom_rules.yaml#/updateCustomRuleById
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      summary: Update a Custom Rule
      description: |
        Updates an existing Custom Rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      parameters:
        - $ref: '#/parameters/ruleId'
        - in: body
          name: body
          description: |
            Policy object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/CustomRule'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Custom Rules (Individual)
      responses:
        200:
          description: |
            OK.
            Policy updated.
          schema:
            $ref: '#/definitions/CustomRule'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'


######################################################
# The "Advanced Throttling Policy Collection" resource API
######################################################
  '/throttling/policies/advanced':

#-----------------------------------------------------
# Retrieve all Advanced level policies
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/advanced-policy/advanced_policy.yaml#/getAllAdvancedThrottlingPolicies
      summary: Get all Advanced throttling policies.
      description: |
        Retrieves all existing Advanced level throttling policies.
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Advanced Policy (Collection)
      responses:
        200:
          description: |
            OK.
            Policies returned
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicyList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add an Advanced level throttling policy
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/advanced-policy/advanced_policy.yaml#/addAdvancedThrottlingPolicy
      summary: Add an Advanced Throttling Policy
      description: |
        Add a new Advanced level throttling policy.
      parameters:
        - in: body
          name: body
          description: |
            Advanced level policy object that should to be added
          required: true
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Advanced Policy (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicy'
          headers:
            Location:
              description: |
                Location of the newly created Advanced Throttling Policy.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.

######################################################
# The "Individual Advanced Throttling Policy" resource API
######################################################
  '/throttling/policies/advanced/{policyId}':

#-----------------------------------------------------
# Retrieve a certain Advanced Throttling Policy
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_view
      x-examples:
        $ref: docs/examples/advanced-policy/advanced_policy.yaml#/getAdvancedPolicyById
      summary: Get an Advanced Policy
      description: |
        Retrieves an Advanced Policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy returned
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicy'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Policy does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete an Advanced level throttling policy
#-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/advanced-policy/advanced_policy.yaml#/deleteAdvancedThrottlingPolicyById
      summary: Delete an Advanced Throttling Policy
      description: |
        Deletes an Advanced level throttling policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update an Advanced Throttling Policy
#-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tier_manage
      x-examples:
        $ref: docs/examples/advanced-policy/advanced_policy.yaml#/updateAdvancedThrottlingPolicyById
      summary: Update an Advanced Throttling Policy
      description: |
        Updates an existing Advanced level throttling policy.
      parameters:
        - $ref: '#/parameters/policyId'
        - in: body
          name: body
          description: |
            Policy object that needs to be modified
          required: true
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicy'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Advanced Policy (Individual)
      responses:
        200:
          description: |
            OK.
            Policy updated.
          schema:
            $ref: '#/definitions/AdvancedThrottlePolicy'
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Blocking Condition Collection" resource API
######################################################
  '/throttling/blacklist':

#-----------------------------------------------------
# Retrieve all Blocking conditions
#-----------------------------------------------------
    get:
      x-examples:
        $ref: docs/examples/blacklist/blacklist.yaml#/getAllBlockingCondtions
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bl_view
      summary: Get all blocking condtions
      description: |
        Retrieves all existing blocking condtions.
      parameters:
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Blacklist (Collection)
      responses:
        200:
          description: |
            OK.
            Blocking conditions returned
          schema:
            $ref: '#/definitions/BlockingConditionList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Add a Blocking condition
#-----------------------------------------------------
    post:
      x-examples:
        $ref: docs/examples/blacklist/blacklist.yaml#/addBlockingCondition
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bl_manage
      summary: Add a Blocking condition
      description: |
        Adds a new Blocking condition.
      parameters:
        - in: body
          name: body
          description: |
            Blocking condition object that should to be added
          required: true
          schema:
            $ref: '#/definitions/BlockingCondition'
        - $ref: '#/parameters/Content-Type'
      tags:
        - Blacklist (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          schema:
            $ref: '#/definitions/BlockingCondition'
          headers:
            Location:
              description: |
                Location of the newly created resource.
              type: string
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        415:
          description: |
            Unsupported media type.
            The entity of the request was in a not supported format.

######################################################
# The "Individual Blocking Condition" resource API
######################################################
  '/throttling/blacklist/{conditionId}':

#-----------------------------------------------------
# Retrieve a Blocking condition
#-----------------------------------------------------
    get:
      x-examples:
        $ref: docs/examples/blacklist/blacklist.yaml#/retrievesBlockingConditionByConditionId
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bl_view
      summary: Get a Blocking Condition
      description: |
        Retrieves a Blocking Condition providing the condition Id
      parameters:
        - $ref: '#/parameters/conditionId'
        - $ref: '#/parameters/If-None-Match'
        - $ref: '#/parameters/If-Modified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        200:
          description: |
            OK.
            Condition returned
          schema:
            $ref: '#/definitions/BlockingCondition'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
            ETag:
              description: |
                Entity Tag of the response resource.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
            Last-Modified:
              description: |
                Date and time the resource has been modifed the last time.
                Used by caches, or in conditional requests (Will be supported in future).
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        404:
          description: |
            Not Found.
            Requested Condition does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Delete a Blocking condition
#-----------------------------------------------------
    delete:
      x-examples:
        $ref: docs/examples/blacklist/blacklist.yaml#/deleteBlockingCondition
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bl_manage
      summary: Delete a Blocking condition
      description: |
        Deletes an existing Blocking condition
      parameters:
        - $ref: '#/parameters/conditionId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met (Will be supported in future).
          schema:
            $ref: '#/definitions/Error'

#-----------------------------------------------------
# Update a blocking condition status
#-----------------------------------------------------
    patch:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bl_manage
      x-examples:
        $ref: docs/examples/blacklist/blacklist.yaml#/updateBlockingConditionById
      summary: Update a blocking condition
      description: |
        Update a blocking condition by Id
      parameters:
        - $ref: '#/parameters/conditionId'
        - in: body
          name: body
          description: |
            Blocking condition with updated status
          required: true
          schema:
            $ref: '#/definitions/BlockingConditionStatus'
        - $ref: '#/parameters/Content-Type'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Blacklist (Individual)
      responses:
        200:
          description: |
            OK.
            Resource successfully updated.
          schema:
            $ref: '#/definitions/BlockingCondition'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Application Collection" resource APIs
######################################################
  /applications:

#-----------------------------------------------------
# Retrieve a list of all applications of a certain subscriber
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:app_owner_change
            - apim:app_import_export
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/applications
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/admin/v1/applications\""
      x-wso2-response: "HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"previous\": \"\",\n   \"list\":    [\n            {\n         \"groupId\": \"\",\n         \"owner\": \"admin\",\n           \"applicationId\": \"367a2361-8db5-4140-8133-c6c8dc7fa0c4\",\n         \"status\": \"APPROVED\",\n         \"name\": \"app1\"\n      },\n            {\n         \"groupId\": \"\",\n         \"owner\": \"admin\",\n             \"applicationId\": \"896658a0-b4ee-4535-bbfa-806c894a4015\",\n          \"status\": \"APPROVED\",\n         \"name\": \"DefaultApplication\"\n      }\n   ],\n   \"count\": 2,\n   \"next\": \"\"\n}"
      summary: |
        Retrieve/Search applications
      description: |
        This operation can be used to retrieve list of applications that is belonged to the given user, If no user
        is provided then the application for the user associated with the provided access token will be returned.
      parameters:
        - $ref: '#/parameters/user'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - name: name
          in: query
          description: |
            Application Name
          required: false
          type: string
        - name: tenantDomain
          in: query
          description: |
               Tenant domain of the applications to get. This has to be specified only if require to get applications of
               another tenant other than the requester's tenant. So, if not specified, the default will be set as the
               requester's tenant domain. This cross tenant Application access is allowed only for super tenant admin
               users only at a migration process.
          required: false
          type: string
      tags:
        - Application (Collection)
      responses:
        200:
          description: |
            OK.
            Application list returned.
          schema:
            $ref: '#/definitions/ApplicationList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Individual Application" resource APIs
######################################################
  /applications/{applicationId}:

    #-----------------------------------------------------
    # Delete a certain application
    #-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:app_import_export
      x-examples:
        $ref: docs/examples/alerts/applications.yaml#/delete
      summary: |
        Remove an application
      description: |
        This operation can be used to remove an application specifying its id.
      parameters:
        - $ref: '#/parameters/applicationId'
        - $ref: '#/parameters/If-Match'
      tags:
        - Applications
      responses:
        200:
          description: |
            OK.
            Resource successfully deleted.
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/WorkflowResponse'
          headers:
            Location:
              description: |
                Location of the existing Application.
              type: string
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Change Owner" Function resource API
######################################################
  /applications/{applicationId}/change-owner:

#-----------------------------------------------------
# Change the owner of an Application
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:app_owner_change
      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://localhost:9443/api/am/admin/v1/applications/890a4f4d-09eb-4877-a323-57f6ce2ed79b/change-owner?owner=admin\""
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/apis/change-owner?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK"
      summary: Change Application Owner
      description: |
        This operation is used to change the owner of an Application.
        In order to change the owner of an application, we need to pass the new application owner as a query parameter
      parameters:
        - name: owner
          in: query
          type: string
          required: true
        - $ref: '#/parameters/applicationId'

      tags:
        - Application
      responses:
        200:
          description: |
            OK.
            Application owner changed successfully.

        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested Application does not exist.
          schema:
            $ref: '#/definitions/Error'
        412:
          description: |
            Precondition Failed.
            The request has not been performed because one of the preconditions is not met.
          schema:
            $ref: '#/definitions/Error'

######################################################
# Export Application Resource API
######################################################
  /export/applications:

    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:app_import_export
      produces:
        - application/json
        - application/zip
      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X GET https://localhost:9443/api/am/admin/v1/export/applications?appName=sampleApp&appOwner=admin > admin_sampleApp.zip"
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/export/applications?appName=sampleApp&appOwner=admin
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK\n Connection: keep-alive\n  Content-Disposition: attachment; filename=\"exported-application.zip\"\n  Content-Type: application/zip"
      summary: Export an Application
      description: |
        This operation can be used to export the details of a particular Application as a zip file.
      parameters:
        - name: appName
          in: query
          description: |
            Application Name
          required: true
          type: string
        - name: appOwner
          in: query
          description: |
            Owner of the Application
          required: true
          type: string
        - name: withKeys
          in: query
          description: |
            Export application keys
          required: false
          type: boolean
      tags:
        - Application (Individual)
      responses:
        200:
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            type: file
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested Application does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

######################################################
# Import Application Resource API
######################################################
  /import/applications:

    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:app_import_export
      consumes:
        - multipart/form-data
      x-wso2-curl: "curl -k -F \"file=@exported.zip\" -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/admin/v1/import/applications"
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/applications
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 201 Created\nLocation: https://localhost:9443/api/am/admin/v1/applications/c30f3a6e-ffa4-4ae7-afce-224d1f820524\nContent-Type: application/json\n\n{\n   \"groupId\": \"\",\n   \"callbackUrl\": \"http://my.server.com/callback\",\n   \"owner\": \"admin\",\n   \"applicationId\": \"c30f3a6e-ffa4-4ae7-afce-224d1f820524\",\n   \"status\": \"APPROVED\",\n   \"name\": \"sampleapp\" \n}"
      summary: Import an Application
      description: |
        This operation can be used to import an Application.
      parameters:
        - name: file
          in: formData
          description: |
            Zip archive consisting of exported Application Configuration.
          required: true
          type: file
        - name: preserveOwner
          in: query
          description: |
            Preserve Original Creator of the Application
          required: false
          type: boolean
        - name: skipSubscriptions
          in: query
          description: |
            Skip importing Subscriptions of the Application
          required: false
          type: boolean
        - name: appOwner
          in: query
          description: |
            Expected Owner of the Application in the Import Environment
          type: string
        - name: skipApplicationKeys
          in: query
          description: |
            Skip importing Keys of the Application
          required: false
          type: boolean
        - name: update
          in: query
          description: |
            Update if application exists
          required: false
          type: boolean
      tags:
        - Application (Individual)
      responses:
        200:
          description: |
            OK.
            Successful response with the updated object information as entity in the body.
          schema:
            $ref: '#/definitions/ApplicationInfo'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        207:
          description: |
            Multi Status.
            Partially successful response with skipped APIs information object as entity in the body.
          schema:
            $ref: '#/definitions/APIInfoList'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

######################################################
# Import Resource API
######################################################
  /import/api:
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_import_export
      consumes:
        - multipart/form-data
      x-wso2-curl: "curl -k -F \"file=@exported.zip\" -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/admin/v1/import/api?preserveProvider=false&overwrite=false"
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/apis
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK\nAPI imported successfully."
      summary: Import an API
      description: |
        This operation can be used to import an API.
      parameters:
        - name: file
          in: formData
          description: |
            Zip archive consisting on exported api configuration
          required: true
          type: file
        - name: preserveProvider
          in: query
          description: |
            Preserve Original Provider of the API. This is the user choice to keep or replace the API provider.
          required: false
          type: boolean
        - name: overwrite
          in: query
          description: |
            Whether to update the API or not. This is used when updating already existing APIs.
          required: false
          type: boolean
      tags:
        - API (Individual)
      responses:
        200:
          description: |
            Created.
            API Imported Successfully.
        403:
          description: |
            Forbidden
            Not Authorized to import.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested API to update not found.
          schema:
            $ref: '#/definitions/Error'
        409:
          description: |
            Conflict.
            API to import already exists.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            Error in importing API.
          schema:
            $ref: '#/definitions/Error'

######################################################
# Export Resource API
######################################################
  /export/api:
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_import_export
      produces:
        - application/zip
      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X GET https://localhost:9443/api/am/admin/v1/export/api?name=PizzaShackAPI&version=1.0.0&providerName=admin > exportAPI.zip"
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v1/export/api?name=SampleAPI&version=1.0.0&providerName=admin
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK\n Connection: keep-alive\n  Content-Disposition: attachment; filename=\"exported-api.zip\"\n  Content-Type: application/zip"
      summary: Export an API
      description: |
        This operation can be used to export the details of a particular API as a zip file.
      parameters:
        - name: name
          in: query
          description: |
            API Name
          required: true
          type: string
        - name: version
          in: query
          description: |
            Version of the API
          required: true
          type: string
        - name: providerName
          in: query
          description: |
            Provider name of the API
          required: false
          type: string
        - name: format
          in: query
          description: |
            Format of output documents. Can be YAML or JSON.
          type: string
          enum:
            - JSON
            - YAML
          required: false
        - name: preserveStatus
          in: query
          description: |
            Preserve API Status on export
          required: false
          type: boolean
      tags:
        - API (Individual)
      responses:
        200:
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            type: file
        404:
          description: |
            Not Found.
            Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            Error in exporting API.
          schema:
            $ref: '#/definitions/Error'

######################################################
# Import Resource API Product
######################################################
  /import/api-product:

    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_product_import_export
      consumes:
        - multipart/form-data
      x-wso2-curl: "curl -k -F \"file=@exported.zip\" -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/am/admin/v1/import/api-product?preserveProvider=false&overwriteAPIs=false&overwriteAPIProduct=false"
      x-wso2-request: |
        POST https://localhost:9443/api/am/admin/v1/import/api-product
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK\nAPI Product imported successfully."
      summary: Import an API Product
      description: |
        This operation can be used to import an API Product.
      parameters:
        - name: file
          in: formData
          description: |
            Zip archive consisting on exported API Product configuration
          required: true
          type: file
        - name: preserveProvider
          in: query
          description: |
            Preserve Original Provider of the API Product. This is the user choice to keep or replace the API Product provider.
          required: false
          type: boolean
        - name: importAPIs
          in: query
          description: |
            Whether to import the dependent APIs or not.
          required: false
          type: boolean
        - name: overwriteAPIProduct
          in: query
          description: |
            Whether to update the API Product or not. This is used when updating already existing API Products.
          required: false
          type: boolean
        - name: overwriteAPIs
          in: query
          description: |
            Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.
          required: false
          type: boolean
      tags:
        - API Product (Individual)
      responses:
        200:
          description: |
            Created.
            API Product Imported Successfully.
        403:
          description: |
            Forbidden
            Not Authorized to import.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested API Product to update not found.
          schema:
            $ref: '#/definitions/Error'
        409:
          description: |
            Conflict.
            API Product to import already exists.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            Error in importing API Product.
          schema:
            $ref: '#/definitions/Error'

######################################################
# Export Resource API Product
######################################################
  /export/api-product:

    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_product_import_export
      produces:
        - application/zip
      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X GET https://localhost:9443/api/am/admin/v0.17/export/api-product?name=SampleAPIProduct&version=1.0.0&providerName=admin > exportAPIProduct.zip"
      x-wso2-request: |
        GET https://localhost:9443/api/am/admin/v0.17/export/api-product?name=SampleAPIProduct&version=1.0.0&providerName=admin
        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK\n Connection: keep-alive\n  Content-Disposition: attachment; filename=\"exported-api-product.zip\"\n  Content-Type: application/zip"
      summary: Export an API Product
      description: |
        This operation can be used to export the details of a particular API Product as a zip file.
      parameters:
        - name: name
          in: query
          description: |
            API Product Name
          required: true
          type: string
        - name: version
          in: query
          description: |
            Version of the API Product
          required: true
          type: string
        - name: providerName
          in: query
          description: |
            Provider name of the API Product
          required: false
          type: string
        - name: format
          in: query
          description: |
            Format of output documents. Can be YAML or JSON.
          type: string
          enum:
            - JSON
            - YAML
          required: false
        - name: preserveStatus
          in: query
          description: |
            Preserve API Product Status on export
          required: false
          type: boolean
      tags:
        - API Product (Individual)
      responses:
        200:
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            type: file
        404:
          description: |
            Not Found.
            Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            Error in exporting API Product.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Label" resource API
######################################################
  /labels:

#-----------------------------------------------------
# Retrieve all labels
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:label_read
      x-examples:
        $ref: docs/examples/label/label.yaml#/getAllRegisteredLabels
      summary: Get all registered Labels
      description: |
        Get all registered Labels
      tags:
        - Label Collection
      responses:
        200:
          description: |
            OK.
            Labels returned
          schema:
            $ref: '#/definitions/LabelList'

#-----------------------------------------------------
# Add a Label
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:label_manage
      x-examples:
        $ref: docs/examples/label/label.yaml#/addNewGatewayLabel
      summary: Add a Label
      description: |
        Add a new gateway Label
      parameters:
        - in: body
          name: body
          description: |
            Label object that should to be added
          required: true
          schema:
            $ref: '#/definitions/Label'
      tags:
        - Label
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
          schema:
            $ref: '#/definitions/Label'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'

######################################################
# The Bot Detection Data API resources
######################################################

  /bot-detection-data:
  #-----------------------------------------------------
  # Get all bot detection data
  #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:bot_data
      operationId: getBotDetectionData
      produces:
        - application/json
      summary: |
        Get all bot detected data
      description: |
        Get all bot detected data
      responses:
        200:
          description: |
            OK.
            Bot detected data returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/BotDetectionDataList'
        404:
          description: |
            Not Found.
            Analytics Not Enabled.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Individual label" resource APIs
######################################################

  /labels/{labelId}:

#-----------------------------------------------------
# Update a Label
#-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:label_manage
      x-examples:
        $ref: docs/examples/label/label.yaml#/updateLabelByLabelId
      summary: Update a Label
      description: |
        Update a Label by label Id
      parameters:
        - $ref: '#/parameters/labelId'
        - in: body
          name: body
          description: |
            Label object with updated information
          required: true
          schema:
            $ref: '#/definitions/Label'
      tags:
        - Label
      responses:
        200:
          description: |
            OK.
            Label updated.
          schema:
            $ref: '#/definitions/Label'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
#-----------------------------------------------------
# Delete a Label
#-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:label_manage
      x-examples:
        $ref: docs/examples/label/label.yaml#/deleteLabelById
      summary: Delete a Label
      description: |
        Delete a Label by label Id
      parameters:
        - $ref: '#/parameters/labelId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - Label
      responses:
        200:
          description: |
            OK.
            Label successfully deleted.
        404:
          description: |
            Not Found.
            Label to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'


  ######################################################
  # The "Monetization" resource APIs
  ######################################################

  /monetization/publish-usage:

    #-----------------------------------------------------
    # Publish monetization related usage records
    #-----------------------------------------------------
    post:
      x-examples:
        $ref: docs/examples/monetization/monetization.yaml#/publishUsageRecords
      security:
        - OAuth2Security:
            - apim:admin
            - apim:monetization_usage_publish
      summary: Publish Usage Records
      description: |
        Publish Usage Records of Monetized APIs
      tags:
        - Monetization (Collection)
      responses:
        200:
          description: Usage records successfully published.
          schema:
            $ref: '#/definitions/PublishStatus'
        202:
          description: Request is sucessfully accepted for processing.
          schema:
            $ref: '#/definitions/PublishStatus'
        404:
          description: |
            Not Found.
          schema:
            $ref: '#/definitions/PublishStatus'
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/PublishStatus'


  /monetization/publish-usage/status:

    #-----------------------------------------------------
    # Retrieve the status monetization usage publish job
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:monetization_usage_publish
      x-examples:
        $ref: docs/examples/monetization/monetization.yaml#/getStatusOfMonetizationUsagePublish
      summary: Get the status of Monetization usage publisher
      description: |
        Get the status of Monetization usage publisher
      tags:
        - Monetization (Collection)
      responses:
        200:
          description: |
            OK.
            Status returned
          schema:
            $ref: '#/definitions/MonetizationUsagePublishInfo'

  ######################################################
  # The "Workflow Collection" resource APIs
  ######################################################
  '/workflows':

    #---------------------------------------------------
    # Retrieve a list of all workflow pending processes
    #---------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_workflow_view
      x-examples:
        $ref: docs/examples/workflows/workflows.yaml#/retrieveAllPendingWorkflowProcesses
      summary: |
        Retrieve All pending workflow processes
      description: |
        This operation can be used to retrieve list of workflow pending processes.
      parameters:
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/offset'
        - $ref: '#/parameters/Accept'
        - $ref: '#/parameters/If-None-Match'
        - name: workflowType
          in: query
          description: |
            We need to show the values of each workflow process separately .for that we use workflow type.
            Workflow type can be AM_APPLICATION_CREATION, AM_SUBSCRIPTION_CREATION,   AM_USER_SIGNUP, AM_APPLICATION_REGISTRATION_PRODUCTION, AM_APPLICATION_REGISTRATION_SANDBOX.
          required: false
          type: string
          enum:
            - AM_APPLICATION_CREATION
            - AM_SUBSCRIPTION_CREATION
            - AM_USER_SIGNUP
            - AM_APPLICATION_REGISTRATION_PRODUCTION
            - AM_APPLICATION_REGISTRATION_SANDBOX
            - AM_SUBSCRIPTION_DELETION
            - AM_APPLICATION_DELETION
            - AM_API_STATE
      tags:
        - Workflow (Collection)
      responses:
        200:
          description: |
            OK.
            Workflow pendding process list returned.
          schema:
            $ref: '#/definitions/WorkflowList'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        404:
          description: |
            Not Found.
            Requested user does not exist.
          schema:
            $ref: '#/definitions/Error'
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource (Will be supported in future).
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'
  #----------------------------------------------------------------
  # Retrieve workflow requests according to the external reference
  #----------------------------------------------------------------
  '/workflows/{externalWorkflowRef}':

    #-----------------------------------------------------
    # Retrieve the Details of a workflow pending process
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_workflow_view
      x-examples:
        $ref: docs/examples/workflows/workflows.yaml#/getPendingRrequestByExternalWorkflowReferencId
      summary: |
        Get details of the pending workflow request according to the External Workflow Reference.
      description: |
        Using this operation, you can retrieve complete details of a pending workflow request that either belongs to application creation, application subscription, application registration, api state change, user self sign up.. You need to provide the External_Workflow_Reference of the workflow Request to retrive it.
      parameters:
        - name: externalWorkflowRef
          in: path
          description: |
            from the externel workflow reference we decide what is the the pending request that the are requesting.
          required: true
          type: string
        - $ref: '#/parameters/If-None-Match'
      tags:
        - Workflows (Individual)
      responses:
        200:
          description: |
            OK.
            Requested Workflow Pending is returned
          schema:
            $ref: '#/definitions/WorkflowInfo'
        304:
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource.
        404:
          description: |
            Not Found.
            Requested workflow pendding process does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The "Workflow approval" resource API
  ######################################################
  /workflows/update-workflow-status:

    #-------------------------------------------------------------------
    # Resume the workflow by approving or rejecting the workflow request
    #-------------------------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:api_workflow_approve
      x-examples:
        $ref: docs/examples/workflows/workflows.yaml#/getPendingRrequestByExternalWorkflowReferencId
      summary: Update workflow status
      description: |
        This operation can be used to approve or reject a workflow task.
      parameters:
        - $ref: '#/parameters/workflowReferenceId-Q'
        - in: body
          name: body
          description: |
            Workflow event that need to be updated
          required: true
          schema:
            $ref: '#/definitions/Workflow'
      tags:
        - Workflows (Individual)
      responses:
        200:
          description: |
            OK.
            Workflow request information is returned.
          schema:
            $ref: '#/definitions/Workflow'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Workflow for the given reference is not found.
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The Tenant Info resource API
  ######################################################
  /tenant-info/{username}:
    #--------------------------------------------------------
    # Retrieve tenant information of the given username
    #--------------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tenantInfo
      x-examples:
        $ref: docs/examples/tenant/tenant.yaml#/getTenantIdOfUser
      summary: |
        Get tenant id of the user
      description: |
        This operation is to get tenant id of the provided Base64 encoded user
      operationId: getTenantInfoByUsername
      parameters:
        - name: username
          description: |
            The state represents the current state of the tenant
            Supported states are [ active, inactive]
          in: path
          type: string
          required: true
          default: 'john@foo.com'
      tags:
        - Tenants
      responses:
        200:
          description: |
            OK.
            Tenant id of the user retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/TenantInfo'
        404:
          description: |
            Not Found.
            Requested user does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The Custom URL Info resource API
  ######################################################
  /custom-urls/{tenantDomain}:
    #----------------------------------------------------------
    # Retrieve custom url information of the given tenant domain
    #----------------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tenantInfo
      x-examples:
        $ref: docs/examples/tenant/tenant.yaml#/getCustomURLInfoOfTenantDomain
      summary: |
        Get custom-url info of a tenant domain
      description: |
        This operation is to get custom-url information of the provided tenant-domain
      operationId: getCustomUrlInfoByTenantDomain
      parameters:
        - name: tenantDomain
          description: |
            The tenant domain name.
          in: path
          type: string
          required: true
      tags:
        - Tenants
      responses:
        200:
          description: |
            OK.
            Custom url info of the tenant is retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/CustomUrlInfo'
        404:
          description: |
            Not Found.
            Requested user does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported
          schema:
            $ref: '#/definitions/Error'

######################################################
# The "Category Collection" resource API
######################################################
  /api-categories:

#-----------------------------------------------------
# Retrieve all categories
#-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      x-examples:
        $ref: docs/examples/api-category/api_category.yaml#/getAllAPICategories
      summary: Get all API categories
      description: |
        Get all API categories
      tags:
        - API Category (Collection)
      responses:
        200:
          description: |
            OK.
            Categories returned
          schema:
            $ref: '#/definitions/APICategoryList'

#-----------------------------------------------------
# Add a Category
#-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      x-examples:
        $ref: docs/examples/api-category/api_category.yaml#/addNewAPICategory
      description: |
        Add a new API Category
      parameters:
        - in: body
          name: body
          description: |
            API Category object that should to be added
          required: true
          schema:
            $ref: '#/definitions/APICategory'
      tags:
        - API Category (Individual)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
          schema:
            $ref: '#/definitions/APICategory'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The "Individual Category" resource APIs
  ######################################################

  /api-categories/{apiCategoryId}:

  #-----------------------------------------------------
  # Update a Category
  #-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      x-examples:
        $ref: docs/examples/api-category/api_category.yaml#/updateAPICategoryByCategoryId
      summary: Update an API Category
      description: |
        Update an API Category by category Id
      parameters:
        - $ref: '#/parameters/apiCategoryId'
        - in: body
          name: body
          description: |
            API Category object with updated information
          required: true
          schema:
            $ref: '#/definitions/APICategory'
      tags:
        - API Category (Individual)
      responses:
        200:
          description: |
            OK.
            Label updated.
          schema:
            $ref: '#/definitions/APICategory'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
  #-----------------------------------------------------
  # Delete an API Category
  #-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      x-examples:
        $ref: docs/examples/api-category/api_category.yaml#/deleteAPICategory
      summary: Delete an API Category
      description: |
        Delete an API Category by API Category Id
      parameters:
        - $ref: '#/parameters/apiCategoryId'
        - $ref: '#/parameters/If-Match'
        - $ref: '#/parameters/If-Unmodified-Since'
      tags:
        - API Category (Individual)
      responses:
        200:
          description: |
            OK.
            API Category successfully deleted.
        404:
          description: |
            Not Found.
            API Category to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'

######################################################
# The Admin settings List
######################################################
  /settings:
#-----------------------------------------------------
# Retrieve admin settings
#-----------------------------------------------------
    get:
      summary: Retreive admin settings
      x-examples:
        $ref: docs/examples/settings/settings.yaml#/getAdminSettings
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_settings
      description: |
        Retreive admin settings
      tags:
        - Settings
      responses:
        200:
          description: |
            OK.
            Settings returned
          schema:
            $ref: '#/definitions/Settings'
        404:
          description: |
            Not Found.
            Requested Settings does not exist.
          schema:
            $ref: '#/definitions/Error'

  ####################################################
  # The Admin alert  management REST API
  ####################################################
  '/alert-types':
    #--------------------------------------------------
    # Retrieve the list of admin alert types
    #--------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      operationId: getAdminAlertTypes
      x-examples:
        $ref: docs/examples/alert-types/alert_types.yaml
      summary: |
        Get the list of admin alert types.
      description: |
        This operation is used to get the list of supportd alert types for the apim admin dashboard
      tags:
        - Alerts
      responses:
        200:
          description: |
            OK.
            The list of admin alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/AlertTypesList'
        500:
          description: |
            Internal Server Error.
            An internal server error occurred while retrieving the alert types.
          schema:
            $ref: '#/definitions/Error'

  '/alert-subscriptions':
    #--------------------------------------------------
    # Retrieve the list of alerts subscribed by the admin user
    #--------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      summary: |
        Get the list of API Admin alert types subscribed by the user.
      operationId: getSubscribedAlertTypes
      x-examples:
        $ref: docs/examples/alert-subscriptions/alert_subscriptions.yaml#/getSubscribedAlertTypes
      description: |
        This operation is used to get the list of subscribed alert types by the user.
      tags:
        - Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            The list of subscribed alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/AlertsSubscription'
        500:
          description: |
            Internal Server Error
            An error occurred while retrieving subscribed alert types by user.
          schema:
            $ref: '#/definitions/Error'

    #--------------------------------------------------
    # Subscribe to the selected alert types by the user.
    #--------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      summary: |
        Subscribe to an admin alert.
      operationId: subscribeToAlerts
      x-examples:
        $ref: docs/examples/alert-subscriptions/alert_subscriptions.yaml#/subscribeToAlerts
      description: |
        This operation is used to subscribe to admin alerts
      parameters:
        - in: body
          name: body
          description:
            The alerts list and the email list to subscribe.
          required: true
          schema:
            $ref: '#/definitions/AlertsSubscription'
      tags:
        - Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            Successful response with the newly subscribed alerts.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/AlertsSubscription'
        400:
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        500:
          description: |
            Internal Server Error
            An internal server error occurred while subscribing to alerts.
          schema:
            $ref: '#/definitions/Error'

    #--------------------------------------------------
    # Unsubscribe the user from all the admin alerts types
    #--------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      summary: |
        Unsubscribe user from all the admin alert types.
      operationId: unsubscribeAllAlerts
      x-examples:
        $ref: docs/examples/alert-subscriptions/alert_subscriptions.yaml#/unsubscribeAllAlerts
      description: |
        This operation is used to unsubscribe the respective user from all the admin alert types.
      tags:
        - Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            The user is unsubscribed from the alerts successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        500:
          description: |
            Internal Server Error
          schema:
            $ref: '#/definitions/Error'

###########################################################
# The Bot Detection Alert Subscription Management resources
###########################################################

  '/alert-subscriptions/bot-detection':
    #------------------------------------------------------------
    # Retrieve the list of subscriptions for bot detection alerts
    #------------------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      operationId: getBotDetectionAlertSubscriptions
      x-examples:
        $ref: docs/examples/alert-subscriptions/bot-detection/bot_detection.yaml#/getBotDetectionAlertSubscriptions
      produces:
        - application/json
      summary: |
        Get the list of subscriptions for bot detection
      description: |
        Get the list of subscriptions which are subscribed to receive email alerts for bot detection
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            The list of bot detection alert subscriptions are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/BotDetectionAlertSubscriptionList'
        500:
          description: |
            Internal Server Error.
            An error occurred while retrieving bot detection alert subscriptions.
          schema:
            $ref: '#/definitions/Error'

    #-----------------------------------------------------
    # Subscribe for bot detection alerts
    #-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      operationId: subscribeForBotDetectionAlerts
      x-examples:
        $ref: docs/examples/alert-subscriptions/bot-detection/bot_detection.yaml#/subscribeForBotDetectionAlerts
      summary: Subscribe for bot detection alerts
      description: |
        Register a subscription for bot detection alerts
      parameters:
        - in: body
          name: body
          description: |
            The email to register to receive bot detection alerts
          required: true
          schema:
            $ref: '#/definitions/BotDetectionAlertSubscription'
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            Bot detection alert subscription is registered successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/BotDetectionAlertSubscription'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            An error occurred while adding a bot detection subscription.
          schema:
            $ref: '#/definitions/Error'

  '/alert-subscriptions/bot-detection/{uuid}':
    #-----------------------------------------------------
    # Unsubscribe from bot detection alerts
    #-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_alert_manage
      operationId: unsubscribeFromBotDetectionAlerts
      x-examples:
        $ref: docs/examples/alert-subscriptions/bot-detection/bot_detection.yaml#/unsubscribeFromBotDetectionAlerts
      summary: Unsubscribe from bot detection alerts.
      description: |
        Delete a subscription from bot detection alerts.
      parameters:
        - in: path
          name: uuid
          required: true
          type: string
          description: uuid of the subscription
      tags:
        - Bot Detection Alert Subscriptions
      responses:
        200:
          description: |
            OK.
            Bot detection alert subscription is deleted successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        404:
          description: |
            Not Found.
            Resource to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error
            An error occurred while deleting a bot detection subscription.
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # System scopes
  ######################################################
  /system-scopes/{scopeName}:
    #-----------------------------------------------------
    # Retrieve scope settings
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:scope_manage
      x-examples:
        $ref: docs/examples/system-scopes/system_scopes.yaml#/retrieveScopesForParticularUser
      operationId: systemScopesScopeNameGet
      summary: Retrieve scopes for a particular user
      description: |
        This operation will return the scope list of particular user
        In order to get it, we need to pass the userId as a query parameter
      parameters:
        - name: username
          in: query
          type: string
          required: false
        - $ref : '#/parameters/scopeName'
      tags:
        - System Scopes
      responses:
        200:
          description: |
            OK.
            Particular scope exists for the given user.
          schema:
            $ref: '#/definitions/ScopeSettings'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested user does not exist.
          schema:
            $ref: '#/definitions/Error'

  /system-scopes:
    #--------------------------------------------------
    # Retrieve the list of role scope mapping
    #--------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:scope_manage
            - apim:admin
      x-examples:
        $ref: docs/examples/system-scopes/system_scopes.yaml#/getListOfRoleScopeMapping
      operationId: systemScopesGet
      summary: |
        Get the list of role scope mapping.
      description: |
        This operation is used to get the list of role scope mapping from tenant-conf for the apim admin dashboard
      tags:
        - System Scopes
      responses:
        200:
          description: |
            OK.
            The list of role scope mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/ScopeList'
        500:
          description: |
            Internal Server Error.
            An internal server error occurred while retrieving the role scope mapping.
          schema:
            $ref: '#/definitions/Error'
    #--------------------------------------------------
    # Update the roles for scopes
    #--------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:scope_manage
      x-examples:
        $ref: docs/examples/system-scopes/system_scopes.yaml#/updateRolesForScope
      summary: |
        Update Roles For Scope
      operationId: updateRolesForScope
      description: |
        This operation is used to update the roles for all scopes
      parameters:
        - in: body
          name: body
          description: |
            Key Manager object with updated information
          required: true
          schema:
            $ref: '#/definitions/ScopeList'
      tags:
        - System Scopes
      responses:
        200:
          description: |
            OK.
            Successful response with the newly added roles.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/ScopeList'
        400:
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        500:
          description: |
            Internal Server Error
            An internal server error occurred while updating the roles.
          schema:
            $ref: '#/definitions/Error'
  ######################################################
  # The 'Role Alias' Collection API Resource
  ######################################################
  /system-scopes/role-aliases:
    #-----------------------------------------------------
    # Retrieve role alias mappings for system scope roles
    #-----------------------------------------------------
    get:
      summary: Retrieve role alias mappings
      security:
        - OAuth2Security:
            - apim:admin
            - apim:scope_manage
      x-examples:
        $ref: docs/examples/system-scopes/rol_alias.yaml#/retrieveRoleAliasMappings
      description: |
        This operation can be used to retreive role alias mapping
      tags:
        - System Scopes
      responses:
        200:
          description: |
            OK.
            The list of role mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            $ref: '#/definitions/RoleAliasList'
        404:
          description: |
            Not Found.
            Requested alias does not exist.
          schema:
            $ref: '#/definitions/Error'

    #-----------------------------------------------------
    # Add a new role alias mapping for system roles
    #-----------------------------------------------------
    put:
      summary: Add a new role alias
      security:
        - OAuth2Security:
            - apim:scope_manage
            - apim:admin
      x-examples:
        $ref: docs/examples/system-scopes/rol_alias.yaml#/addNewRoleAlias
      description: |
        This operation can be used to add a new role alias mapping for system scope roles
      parameters:
        - in: body
          name: body
          description:
            role-alias mapping
          required: true
          schema:
            $ref: '#/definitions/RoleAliasList'
      tags:
        - System Scopes
      responses:
        200:
          description: |
            OK.
            Role mapping alias returned
          schema:
            $ref: '#/definitions/RoleAliasList'
        400:
          description: |
            Bad Request.
            Invalid Request or request validation failure.
        500:
          description: |
            Internal Server Error
            An internal server error occurred while updating the roles.

  ######################################################
  # The Tenant Theme resource APIs
  ######################################################
  /tenant-theme:
    #-----------------------------------------------------
    # Export Tenant Theme
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tenant_theme_manage
      operationId: exportTenantTheme
      produces:
        - application/zip
      x-examples:
        $ref: docs/examples/tenant-theme/tenant_theme.yaml#/exportDevPortalTenantTheme
      summary: Export a DevPortal Tenant Theme
      description: |
        This operation can be used to export a DevPortal tenant theme as a zip file.
      tags:
        - Tenant Theme
      responses:
        200:
          description: |
            OK.
            Tenant Theme Exported Successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
          schema:
            type: file
        403:
          description: |
            Forbidden.
            Not Authorized to export.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested tenant theme does not exist.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            Internal Server Error.
            Error in exporting tenant theme.
          schema:
            $ref: '#/definitions/Error'

    #-----------------------------------------------------
    # Import Tenant Theme
    #-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:tenant_theme_manage
      operationId: importTenantTheme
      consumes:
        - multipart/form-data
      x-examples:
        $ref: docs/examples/tenant-theme/tenant_theme_put.yaml
      summary: Import a DevPortal Tenant Theme
      description: |
        This operation can be used to import a DevPortal tenant theme.
      parameters:
        - name: file
          in: formData
          description: |
            Zip archive consisting of tenant theme configuration
          required: true
          type: file
      tags:
        - Tenant Theme
      responses:
        200:
          description: |
            Ok.
            Tenant Theme Imported Successfully.
        403:
          description: |
            Forbidden.
            Not Authorized to import.
          schema:
            $ref: '#/definitions/Error'
        413:
          description: |
            Payload Too Large.
            Tenant Theme file size exceeds the allowed limit.
        500:
          description: |
            Internal Server Error.
            Error in importing Theme.
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The "Key Manager Collection" resource API
  ######################################################
  /key-managers:

    #-----------------------------------------------------
    # Retrieve all key managers
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations

      summary: Get all Key managers
      description: |
        Get all Key managers
      tags:
        - Key Manager (Collection)
      responses:
        200:
          description: |
            OK.
            KeyManagers returned
          schema:
            $ref: '#/definitions/KeyManagerList'

    #-----------------------------------------------------
    # Add a Key Manager
    #-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      summary: Add a new API Key Manager
      description: |
        Add a new API Key Manager
      parameters:
        - in: body
          name: body
          description: |
            Key Manager object that should to be added
          required: true
          schema:
            $ref: '#/definitions/KeyManager'
      tags:
        - Key Manager (Collection)
      responses:
        201:
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
          schema:
            $ref: '#/definitions/KeyManager'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'

  ######################################################
  # The "Individual KeyManager" resource APIs
  ######################################################

  /key-managers/{keyManagerId}:

    #-----------------------------------------------------
    # Retrieve a certain Key Manager Resource
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      summary: Get a Key Manager Configuration
      description: |
        Retrieve a single Key Manager Configuration. We should provide the Id of the KeyManager as a path parameter.
      parameters:
        - $ref: '#/parameters/keyManagerId'
      tags:
        - Key Manager (Individual)
      responses:
        200:
          description: |
            OK.
            KeyManager Configuration returned
          schema:
            $ref: '#/definitions/KeyManager'
          headers:
            Content-Type:
              description: |
                The content type of the body.
              type: string
        404:
          description: |
            Not Found.
            Requested KeyManager Configuration does not exist.
          schema:
            $ref: '#/definitions/Error'
        406:
          description: |
            Not Acceptable.
            The requested media type is not supported.
          schema:
            $ref: '#/definitions/Error'


    #-----------------------------------------------------
    # Update a Key Manager
    #-----------------------------------------------------
    put:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      summary: Update a Key Manager
      description: |
        Update a Key Manager by keyManager id
      parameters:
        - $ref: '#/parameters/keyManagerId'
        - in: body
          name: body
          description: |
            Key Manager object with updated information
          required: true
          schema:
            $ref: '#/definitions/KeyManager'
      tags:
        - Key Manager (Individual)
      responses:
        200:
          description: |
            OK.
            Label updated.
          schema:
            $ref: '#/definitions/KeyManager'
        400:
          description: |
            Bad Request.
            Invalid request or validation error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            The resource to be updated does not exist.
          schema:
            $ref: '#/definitions/Error'
    #-----------------------------------------------------
    # Delete a Key Manager
    #-----------------------------------------------------
    delete:
      security:
        - OAuth2Security:
            - apim:admin
            - apim:admin_operations
      summary: Delete a Key Manager
      description: |
        Delete a Key Manager by keyManager id
      parameters:
        - $ref: '#/parameters/keyManagerId'
      tags:
        - Key Manager (Individual)
      responses:
        200:
          description: |
            OK.
            Key Manager successfully deleted.
        404:
          description: |
            Not Found.
            Key Manager to be deleted does not exist.
          schema:
            $ref: '#/definitions/Error'




######################################################
# Parameters - required by some of the APIs above
######################################################
parameters:

  # Group Identifier of the application
  username:
    name: username
    in: query
    description: |
      username of the new application owner
    required: true
    type: string

# Scope Name
  scopeName:
    name: scopeName
    in: path
    description: |
      scope name to be validated
    required: true
    type: string

# Label Id
# Specified as part of the path expression
  labelId:
    name: labelId
    in: path
    description: |
      Label UUID
    type: string
    required: true

# Throttling Policy Id
# Specified as part of the path expression
  policyId:
    name: policyId
    in: path
    description: |
      Thorttle policy UUID
    type: string
    required: true

# Custom rule Id
# Specified as part of the path expression
  ruleId:
    name: ruleId
    in: path
    description: |
      Custom rule UUID
    type: string
    required: true

# Application Id
# Specified as part of the path expression
  applicationId:
    name: applicationId
    in: path
    description: |
      Application UUID
    type: string
    required: true

# Blocking Condition Id
# Specified as part of the path expression
  conditionId:
    name: conditionId
    in: path
    description: |
      Blocking condition identifier
    type: string
    required: true

# The HTTP Accept header
  Accept:
    name: Accept
    in: header
    description: |
      Media types acceptable for the response. Default is application/json.
    default: application/json
    type: string

# The HTTP Content-Type header
  Content-Type:
    name: Content-Type
    in: header
    description: |
      Media type of the entity in the body. Default is application/json.
    default: application/json
    required: true
    type : string

# The HTTP If-None-Match header
# Used to avoid retrieving data that are already cached
  If-None-Match:
    name: If-None-Match
    in: header
    description: |
      Validator for conditional requests; based on the ETag of the formerly retrieved
      variant of the resource (Will be supported in future).
    type : string

# The HTTP If-Modified-Since header
# Used to avoid retrieving data that are already cached
  If-Modified-Since:
    name: If-Modified-Since
    in: header
    description: |
      Validator for conditional requests; based on Last Modified header of the
      formerly retrieved variant of the resource (Will be supported in future).
    type: string

# The HTTP If-Match header
# Used to avoid concurrent updates
  If-Match:
    name: If-Match
    in: header
    description: |
      Validator for conditional requests; based on ETag (Will be supported in future).
    type: string

# The HTTP If-Unmodified-Since header
# Used to avoid concurrent updates
  If-Unmodified-Since:
    name: If-Unmodified-Since
    in: header
    description: |
      Validator for conditional requests; based on Last Modified header (Will be supported in future).
    type: string

# Used for pagination:
# The maximum number of resoures to be returned by a GET
  limit:
    name: limit
    in: query
    description: |
      Maximum size of resource array to return.
    default: 25
    type: integer

# Used for pagination:
# The order number of an instance in a qualified set of resoures
# at which to start to return the next batch of qualified resources
  offset:
    name: offset
    in: query
    description: |
      Starting point within the complete list of items qualified.
    default: 0
    type: integer

# Mediation policy identifier
# Specified as part of the path expression
  mediationPolicyId:
    name: mediationPolicyId
    in: path
    description: |
      Mediation policy Id
    required: true
    type: string

# Group Identifier of the application
  user:
    name: user
    in: query
    description: |
      username of the application creator
    required: false
    type: string

  # Workflow reference ID
  # Specified as part of the path expression
  workflowReferenceId-Q:
    name: workflowReferenceId
    in: query
    description: |
      Workflow reference id
    required: true
    type: string

  # API Category Id
  # Specified as part of the path expression
  apiCategoryId:
    name: apiCategoryId
    in: path
    description: |
      API Category UUID
    type: string
    required: true

  # Key Manager Id
  # Specified as part of the path expression
  keyManagerId:
    name: keyManagerId
    in: path
    description: |
      Key Manager UUID
    type: string
    required: true

######################################################
# The resources used by some of the APIs above within the message body
######################################################
definitions:

#-----------------------------------------------------
# The Error resource
#-----------------------------------------------------
  Error:
    title: Error object returned with 4XX HTTP status
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
        description: Error code
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: |
          A detail description about the error message.
      moreInfo:
        type: string
        description: |
          Preferably an url with more details about the error.
      error:
        type: array
        description: |
          If there are more than one error list them out.
          For example, list out validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'

#-----------------------------------------------------
# The Error List Item resource
#-----------------------------------------------------
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: string
        description: Error code
      message:
        type: string
        description: |
          Description about individual errors occurred

#-----------------------------------------------------
# The Throttling Policy resource
#-----------------------------------------------------
  ThrottlePolicy :
    discriminator: policyName
    title: Generic Throttling Policy
    required:
      - policyName
    properties:
      policyId:
        type: string
        description: Id of policy
        example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
      policyName:
        type: string
        description: Name of policy
        example: Policy1
      displayName:
        type: string
        description: Display name of the policy
      description:
        type: string
        description: Description of the policy
      isDeployed:
        type: boolean
        default: false
        description: Indicates whether the policy is deployed successfully or not.

#-----------------------------------------------------
# The Advanced Throttling Policy Info resource
#-----------------------------------------------------
  AdvancedThrottlePolicyInfo :
    title: Advanced Throttling Policy
    required:
      - defaultLimit
    allOf:
      - $ref: '#/definitions/ThrottlePolicy'
      - properties:
          defaultLimit:
            $ref: '#/definitions/ThrottleLimit'

#-----------------------------------------------------
# The Advanced Throttling Policy resource
#-----------------------------------------------------
  AdvancedThrottlePolicy :
    title: Advanced Throttling Policy
    allOf:
      - $ref: '#/definitions/ThrottlePolicy'
      - required:
        - defaultLimit
        properties:
          defaultLimit:
            $ref: '#/definitions/ThrottleLimit'
          conditionalGroups:
            type: array
            description: |
              Group of conditions which allow adding different parameter conditions to the throttling limit.
            items:
              $ref: '#/definitions/ConditionalGroup'

#-----------------------------------------------------
# The Advanced Throttling Policy List resource
#-----------------------------------------------------
  AdvancedThrottlePolicyList:
    title: Advanced Throttling Policy List
    properties:
      count:
        type: integer
        description: |
          Number of Advanced Throttling Policies returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/AdvancedThrottlePolicyInfo'

#-----------------------------------------------------
# The Application Throttling Policy resource
#-----------------------------------------------------
  ApplicationThrottlePolicy:
    title: Application Throttling Policy
    allOf:
      - $ref: '#/definitions/ThrottlePolicy'
      - required:
        - defaultLimit
        properties:
          defaultLimit:
            $ref: '#/definitions/ThrottleLimit'

#-----------------------------------------------------
# The Advanced Throttling Policy List resource
#-----------------------------------------------------
  ApplicationThrottlePolicyList:
    title: Application Level Throttling Policy List
    properties:
      count:
        type: integer
        description: |
          Number of Application Throttling Policies returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/ApplicationThrottlePolicy'

#-----------------------------------------------------
# The Subscription Throttling Policy resource
#-----------------------------------------------------
  SubscriptionThrottlePolicy:
    title: Subscription Throttling Policy
    allOf:
      - $ref: '#/definitions/ThrottlePolicy'
      - $ref: '#/definitions/GraphQLQuery'
      - required:
        - defaultLimit
        properties:
          defaultLimit:
            $ref: '#/definitions/ThrottleLimit'
          monetization:
            $ref: '#/definitions/MonetizationInfo'
          rateLimitCount:
            type: integer
            default: 0
            description: Burst control request count
            example: 10
          rateLimitTimeUnit:
            type: string
            description: Burst control time unit
          customAttributes:
            description: |
              Custom attributes added to the Subscription Throttling Policy
            type: array
            items:
              $ref: '#/definitions/CustomAttribute'
            additionalProperties:
              type: string
            example: {}
          stopOnQuotaReach:
            type: boolean
            default: false
            description: |
             This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user's requests will be dropped. If unchecked, the requests will be allowed to pass through.
          billingPlan:
            type: string
            description: |
              define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL.

#-----------------------------------------------------
# The GraphQL Query resource
#-----------------------------------------------------
  GraphQLQuery:
    title: GraphQL Query
    properties:
      graphQLMaxComplexity:
        type: integer
        description: Maximum Complexity of the GraphQL query
        example: 400
      graphQLMaxDepth:
        type: integer
        description: Maximum Depth of the GraphQL query
        example: 10

#-----------------------------------------------------
# The Subscription Throttling Policy List resource
#-----------------------------------------------------
  SubscriptionThrottlePolicyList:
    title: Subscription Level Throttling Policy List
    properties:
      count:
        type: integer
        description: |
          Number of Subscription Throttling Policies returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/SubscriptionThrottlePolicy'

#-----------------------------------------------------
# The Custom Rule resource
#-----------------------------------------------------
  CustomRule:
    title: Custom Rule
    allOf:
      - $ref: '#/definitions/ThrottlePolicy'
      - required:
        - siddhiQuery
        - keyTemplate
        properties:
          siddhiQuery:
            type: string
            description: Siddhi query which represents the custom throttling policy
            example: |
              FROM RequestStream\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\nINSERT INTO EligibilityStream; \n\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into ResultStream;
          keyTemplate:
            type: string
            description: The specific combination of attributes that are checked in the policy.
            example: $userId

#-----------------------------------------------------
# The Custom Rule List resource
#-----------------------------------------------------
  CustomRuleList:
    title: Custom Rule List
    properties:
      count:
        type: integer
        description: |
          Number of Custom Rules returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/CustomRule'

#-----------------------------------------------------
# The Conditional Group resource
#-----------------------------------------------------
  ConditionalGroup:
    title: Conditional Groups for Throttling
    required:
      - limit
      - conditions
    properties:
      description:
        type: string
        description: Description of the Conditional Group
      conditions:
        type: array
        items:
          $ref: '#/definitions/ThrottleCondition'
        description: |
          Individual throttling conditions. They can be defined as either HeaderCondition, IPCondition, JWTClaimsCondition, QueryParameterCondition
          Please see schemas of each of those throttling condition in Definitions section.
        example: |
          [
            {
              "type": "HEADERCONDITION",
              "invertCondition": false,
              "headerCondition":
              {
                "headerName": "Host",
                "headerValue": "10.100.7.77"
              }
          	},
          	{
              "type": "IPCONDITION",
              "invertCondition": false,
              "ipCondition":
              {
                "ipConditionType": "IPSPECIFIC",
                "specificIP": "10.100.1.22",
                "startingIP": null,
                "endingIP": null
              }
          	},
          	{
              "type": "QUERYPARAMETERCONDITION",
              "invertCondition": false,
              "queryParameterCondition":
              {
                "parameterName": "name",
                "parameterValue": "admin"
              }
          	},
          	{
              "type": "JWTCLAIMSCONDITION",
              "invertCondition": true,
              "jwtClaimsCondition":
              {
                "claimUrl": "claimUrl0",
                "attribute": "claimAttr0"
              }
            }
          ]
      limit:
        $ref: '#/definitions/ThrottleLimit'

#-----------------------------------------------------
# The Throttling Condition resource
#-----------------------------------------------------
  ThrottleCondition:
    title: Throttling Conditions
    description: Conditions used for Throttling
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - HEADERCONDITION
          - IPCONDITION
          - JWTCLAIMSCONDITION
          - QUERYPARAMETERCONDITION
        description: |
          Type of the throttling condition. Allowed values are "HEADERCONDITION", "IPCONDITION", "JWTCLAIMSCONDITION"
          and "QUERYPARAMETERCONDITION".
      invertCondition:
        type: boolean
        default: false
        description: |
          Specifies whether inversion of the condition to be matched against the request.

          **Note:** When you add conditional groups for advanced throttling policies, this paramater should have the
          same value ('true' or 'false') for the same type of conditional group.
      headerCondition:
        $ref: '#/definitions/HeaderCondition'
      ipCondition:
        $ref: '#/definitions/IPCondition'
      jwtClaimsCondition:
        $ref: '#/definitions/JWTClaimsCondition'
      queryParameterCondition:
        $ref: '#/definitions/QueryParameterCondition'

#-----------------------------------------------------
# The Throttling HTTP Header Condition resource
#-----------------------------------------------------
  HeaderCondition:
    title: HTTP Header based throttling condition
    required:
      - headerName
      - headerValue
    properties:
      headerName:
        type: string
        description: Name of the header
      headerValue:
        type: string
        description: Value of the header

#-----------------------------------------------------
# The Throttling IP Condition resource
#-----------------------------------------------------
  IPCondition:
    title: IP based throttling condition
    required:
      - specificIP
    properties:
      ipConditionType:
        type: string
        enum:
          - IPRANGE
          - IPSPECIFIC
        description: Type of the IP condition. Allowed values are "IPRANGE" and "IPSPECIFIC"
      specificIP:
        type: string
        description: Specific IP when "IPSPECIFIC" is used as the ipConditionType
      startingIP:
        type: string
        description: Staring IP when "IPRANGE" is used as the ipConditionType
      endingIP:
        type: string
        description: Ending IP when "IPRANGE" is used as the ipConditionType

#-----------------------------------------------------
# The JWT Claims Condition resource
#-----------------------------------------------------
  JWTClaimsCondition:
    title:  JWT claim attibute based throttling condition
    required:
      - claimUrl
      - attribute
    properties:
      claimUrl:
        type: string
        description: JWT claim URL
      attribute:
        type: string
        description: Attribute to be matched

#-----------------------------------------------------
# The Query Parameter Condition resource
#-----------------------------------------------------
  QueryParameterCondition:
    title: Query parameter based throttling condition
    required:
      - parameterName
      - parameterValue
    properties:
      parameterName:
        type: string
        description: Name of the query parameter
      parameterValue:
        type: string
        description: Value of the query parameter to be matched

#-----------------------------------------------------
# The Throttling Limit Base resource
#-----------------------------------------------------
  ThrottleLimitBase:
    title: Throttle Limit Base
    required:
      - timeUnit
      - unitTime
    properties:
      timeUnit:
        type: string
        description: Unit of the time. Allowed values are "sec", "min", "hour", "day"
        example: min
      unitTime:
        type: integer
        default: 0
        description: Time limit that the throttling limit applies.
        example: 10

#-----------------------------------------------------
# The Throttling Limit resource
#-----------------------------------------------------
  ThrottleLimit:
    title: Throttle Limit
    required:
      - type
    properties:
      type:
        type: string
        enum:
          - REQUESTCOUNTLIMIT
          - BANDWIDTHLIMIT
        description: |
          Type of the throttling limit. Allowed values are "REQUESTCOUNTLIMIT" and "BANDWIDTHLIMIT".
          Please see schemas of "RequestCountLimit" and "BandwidthLimit" throttling limit types in
          Definitions section.
        example: REQUESTCOUNTLIMIT
      requestCount:
        $ref: '#/definitions/RequestCountLimit'
      bandwidth:
        $ref: '#/definitions/BandwidthLimit'

#-----------------------------------------------------
# The Monetization Info resource
#-----------------------------------------------------
  MonetizationInfo:
    title: API monetization details object
    required:
      - monetizationPlan
      - properties
    properties:
      monetizationPlan:
        type: string
        description: Flag to indicate the monetization plan
        enum:
          - FixedRate
          - DynamicRate
        example: FixedRate
      properties:
        type: object
        description: Map of custom properties related to each monetization plan
        additionalProperties:
          type: string

#-----------------------------------------------------
# The Throttling Bandwidth Limit resource
#-----------------------------------------------------
  BandwidthLimit:
    title: Bandwidth Limit object
    allOf:
      - $ref: '#/definitions/ThrottleLimitBase'
      - required:
        - dataAmount
        - dataUnit
        properties:
          dataAmount:
            type: integer
            format: int64
            description: Amount of data allowed to be transfered
            example: 1000
          dataUnit:
            type: string
            description: Unit of data allowed to be transfered. Allowed values are "KB", "MB" and "GB"
            example: KB

#-----------------------------------------------------
# The Throttling Request Count Limit resource
#-----------------------------------------------------
  RequestCountLimit:
    title: Request Count Limit object
    allOf:
      - $ref: '#/definitions/ThrottleLimitBase'
      - required:
        - requestCount
        properties:
          requestCount:
            type: integer
            format: int64
            description: Maximum number of requests allowed
            example: 1000

#-----------------------------------------------------
# The Throttling Blocking Condition resource
#-----------------------------------------------------
  BlockingCondition:
    title: Blocking Conditions
    description: Blocking Conditions
    required:
      - conditionType
      - conditionValue
    properties:
      conditionId:
        type: string
        description: Id of the blocking condition
        example: b513eb68-69e8-4c32-92cf-852c101363cf
      conditionType:
        type: string
        description: Type of the blocking condition
        example: IP
      conditionValue:
        type: object
        description: Value of the blocking condition
        example: '{"fixedIp":"192.168.1.1":"invert":false}'
      conditionStatus:
        type: boolean
        description: Status of the blocking condition
        example: true

#-----------------------------------------------------
# The Throttling Blocking Condition List resource
#-----------------------------------------------------
  BlockingConditionList:
    title: Blocking Conditions List
    properties:
      count:
        type: integer
        description: |
          Number of Blocking Conditions returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/BlockingCondition'
#-----------------------------------------------------
# The Throttling Blocking Condition Status resource
#-----------------------------------------------------
  BlockingConditionStatus:
    title: Blocking Conditions Status
    description: Blocking Conditions Status
    required:
      - conditionStatus
    properties:
      conditionId:
        type: string
        description: Id of the blocking condition
        example: b513eb68-69e8-4c32-92cf-852c101363cf
      conditionStatus:
        type: boolean
        description: Status of the blocking condition
        example: true

#-----------------------------------------------------
# Custom Attribute object
#-----------------------------------------------------
  CustomAttribute:
    title: Name-Value pair
    required:
      - name
      - value
    properties:
      name:
        type: string
        description: Name of the custom attribute
        example: customAttr1
      value:
        type: string
        description: Value of the custom attribute
        example: value1

#-----------------------------------------------------
# The Mediation List resource
#-----------------------------------------------------
  mediationList:
    title: Mediation List
    properties:
      count:
        type: integer
        description: |
          Number of mediation sequences returned.
        example: 1
      next:
        type: string
        description: |
          Link to the next subset of sequences qualified.
          Empty if no more sequences are to be returned.
        example: ""
      previous:
        type: string
        description: |
          Link to the previous subset of sequences qualified.
          Empty if current subset is the first subset returned.
        example: ""
      list:
        type: array
        items:
          $ref: '#/definitions/MediationInfo'

#-----------------------------------------------------
# The MediationInfo resource
#-----------------------------------------------------
  MediationInfo:
    title: MediationInfo
    required:
      - name
      - type
      - id
    properties:
      name:
        type: string
        example: json_fault.xml
      id:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      type:
        type: string
        enum:
          - in
          - out
          - fault
        example: in

#-----------------------------------------------------
# The Mediation resource
#-----------------------------------------------------
  Mediation:
    title: Mediation
    required:
      - name
      - type
      - config
    properties:
      id:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: json_fault.xml
      type:
        type: string
        enum:
          - in
          - out
          - fault
        example: in
      config:
        type: string
        example: '<sequence xmlns="http://ws.apache.org/ns/synapse" name="log_in_message">
                      <log level="full">
                          <property name="IN_MESSAGE" value="IN_MESSAGE_21133232"/>
                      </log>
                  </sequence>'

#-----------------------------------------------------
# The Application List resource
#-----------------------------------------------------
  ApplicationList:
    title: Application List
    properties:
      count:
        type: integer
        description: |
          Number of applications returned.
        example: 1
      next:
        type: string
        description: |
          Link to the next subset of resources qualified.
          Empty if no more resources are to be returned.
        example: "/applications?limit=1&offset=2&user="
      previous:
        type: string
        description: |
          Link to the previous subset of resources qualified.
          Empty if current subset is the first subset returned.
        example: "/applications?limit=1&offset=0&user="
      list:
        type: array
        items:
          $ref: '#/definitions/ApplicationInfo'

#-----------------------------------------------------
# The Application Info resource
#-----------------------------------------------------
  ApplicationInfo:
    title: Application info object with basic application details
    properties:
      applicationId:
        type: string
        example: 01234567-0123-0123-0123-012345678901
      name:
        type: string
        example: CalculatorApp
      owner:
        type: string
        example: admin
      status:
        type: string
        example: APPROVED
      groupId:
        type: string
        example: ""

#-----------------------------------------------------
# The API Info List resource
#-----------------------------------------------------
  APIInfoList:
    title: API Info List
    properties:
      count:
        type: integer
        description: |
          Number of API Info objects returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/APIInfo'

#-----------------------------------------------------
# The API Info resource
#-----------------------------------------------------
  APIInfo:
    title: API info object with basic API details
    properties:
      name:
        type: string
        description: The name of the API.
        example: PizzaShackAPI
      version:
        type: string
        description: The version of the API
        example: 1.0.0
      provider:
        type: string
        description: The provider of the API
        example: admin

#-----------------------------------------------------
# The Label resource
#-----------------------------------------------------
  Label:
    title: Label
    required:
    - name
    properties:
      id:
        type: string
        example: "This is not mandatory.Auto generate by code"
      name:
        type: string
        example: "Public"
      description:
        type: string
        example: "Label to use for public Gateway"
      accessUrls:
        type: array
        items:
          type: string
          example: "http://localhost:9443/"
#-----------------------------------------------------
# The Label List resource
#-----------------------------------------------------
  LabelList:
    title: Label List
    properties:
      count:
        type: integer
        description: |
          Number of Labels returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/Label'

  #-----------------------------------------------------
  # The publish status resource
  #-----------------------------------------------------
  PublishStatus:
    title: Usage publish status
    properties:
      status:
        type: string
        description: Status of the usage publish request
      message:
        type: string
        description: detailed message of the status

  #-----------------------------------------------------
  # The publish status resource
  #-----------------------------------------------------
  MonetizationUsagePublishInfo:
    title: Usage publish status
    properties:
      state:
        type: string
        description: State of usage publish job
      status:
        type: string
        description: Status of usage publish job
      startedTime:
        type: string
        description: Timestamp of the started time of the Job
      lastPublsihedTime:
        type: string
        description: Timestamp of the last published time

  #-----------------------------------------------------
  # The workflow response resource
  #-----------------------------------------------------
  Workflow:
    title: workflow
    required:
      - status
    properties:
      status:
        description: |
          This attribute declares whether this workflow task is approved or rejected.
        type: string
        enum:
          - APPROVED
          - REJECTED
        example: APPROVED
      attributes:
        description: |
          Custom attributes to complete the workflow task
        type: object
        additionalProperties:
          type: string
        example: {}
      description:
        type: string
        example: "Approve workflow request."

  #-----------------------------------------------------
  # The Tenant info response resource
  #-----------------------------------------------------
  TenantInfo:
    title: Tenant information
    type: object
    description: The tenant information of the user
    properties:
      username:
        type: string
        example: 'john'
      tenantDomain:
        type: string
        example: 'carbon.super'
      tenantId:
        type: integer
        example: -1234

  #-----------------------------------------------------
  # The CustomURL info response resource
  #-----------------------------------------------------
  CustomUrlInfo:
    title: Custom url information
    type: object
    description: The custom url information of the tenant domain
    properties:
      tenantDomain:
        type: string
        example: 'carbon.super'
      tenantAdminUsername:
        type: string
        example: 'john@foo.com'
      enabled:
        type: boolean
        example: true
      devPortal:
        type: object
        properties:
          url:
            type: string
            example: "http://example.com"

  #-----------------------------------------------------
  # The Category resource
  #-----------------------------------------------------
  APICategory:
    title: API Category
    required:
      - name
    properties:
      id:
        type: string
        example: "01234567-0123-0123-0123-012345678901"
      name:
        type: string
        example: "Finance"
      description:
        type: string
        example: "Finance related APIs"
      numberOfAPIs:
        type: integer
        example: 1
  #-----------------------------------------------------
  # The Category List resource
  #-----------------------------------------------------
  APICategoryList:
    title: API Category List
    properties:
      count:
        type: integer
        description: |
          Number of API categories returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/APICategory'

  #-----------------------------------------------------
  # The File Information resource
  #-----------------------------------------------------
  FileInfo :
    title: File Information including meta data
    properties:
      relativePath:
        type: string
        description: relative location of the file (excluding the base context and host of the Admin API)
        example: "api-categories/01234567-0123-0123-0123-012345678901/thumbnail"
      mediaType:
        type: string
        description: media-type of the file
        example: "image/jpeg"

  #-----------------------------------------------------
  # The Settings resource
  #-----------------------------------------------------
  Settings:
    title: Settings
    properties:
      scopes:
        type: array
        items:
          type: string
      keyManagerConfiguration:
        type: array
        items:
          properties:
            type:
              type: string
              example: 'wso2is'
            configurations:
              type: array
              items:
                $ref: '#/definitions/KeyManagerConfiguration'
      analyticsEnabled:
        type: boolean
        description: To determine whether analytics is enabled or not
        example: false

  #-----------------------------------------------------
  # The Scope Role Mapping List resource
  #-----------------------------------------------------
  ScopeList:
    title: Scope Role Mapping List
    properties:
      count:
        type: integer
        description: |
          Number of scopes available for tenant.
        example: 60
      list:
        type: array
        items:
          $ref: '#/definitions/Scope'

  #-----------------------------------------------------
  # The Scope resource
  #-----------------------------------------------------
  Scope:
    title: Scope Role
    properties:
      tag:
        type: string
        description: |
          Portal name.
        example: "publisher"
      name:
        type: string
        description: |
          Scope name.
        example: "apim:api_publish"
      description:
        type: string
        description: |
          About scope.
        example: "Publish API"
      roles:
        schema:
          type: array
          items:
            type: string
        description: |
          Roles for the particular scope.
        example: ["admin","Internal/publisher"]

  #-----------------------------------------------------
  # The KeyManager resource
  #-----------------------------------------------------
  KeyManager:
    title: Key Manager
    required:
      - name
      - type
    properties:
      id:
        type: string
        example: "01234567-0123-0123-0123-012345678901"
      name:
        type: string
        example: "WSO2 IS"
      displayName:
        type: string
        description: |
          display name of Key Manager to  show in UI
        example: KeyManager1
      type:
        type: string
        example: "IS"
      description:
        type: string
        example: "This is a key manager for Developers"
      introspectionEndpoint:
        type: string
        example: ""
      clientRegistrationEndpoint:
        type: string
        example: ""
      tokenEndpoint:
        type: string
        example: ""
      revokeEndpoint:
        type: string
        example: ""
      userInfoEndpoint:
        type: string
        example: ""
      authorizeEndpoint:
        type: string
        example: ""
      certificates:
        type: object
        properties:
          type:
            type: string
            enum:
              - JWKS
              - PEM
          value:
            type: string
      issuer:
        type: string
        example: ""
      scopeManagementEndpoint:
        type: string
        example: ""
      availableGrantTypes:
        type: array
        items:
          type: string
          example: "client_credentials"
      enableTokenGeneration:
        type: boolean
        example: true
      enableTokenEncryption:
        type: boolean
        example: false
        default: false
      enableTokenHashing:
        type: boolean
        example: false
        default: false
      enableMapOAuthConsumerApps:
        type: boolean
        example: false
        default: false
      enableOAuthAppCreation:
        type: boolean
        example: false
        default: false
      enableSelfValidationJWT:
        type: boolean
        example: true
        default: true
      claimMapping:
        type: array
        items:
          $ref: '#/definitions/ClaimMappingEntry'
      consumerKeyClaim:
        type: string
        example: 'azp'
      scopesClaim:
        type: string
        example: 'scp'
      tokenValidation:
        type: array
        items:
          $ref: '#/definitions/TokenValidation'
      enabled:
        type: boolean
        example: true
      additionalProperties:
        type: object

  #-----------------------------------------------------
  # The KeyManager resource
  #-----------------------------------------------------
  KeyManagerInfo:
    title: Key Manager Info
    required:
      - name
      - type
    properties:
      id:
        type: string
        example: "01234567-0123-0123-0123-012345678901"
      name:
        type: string
        example: "WSO2 IS"
      type:
        type: string
        example: "IS"
      description:
        type: string
        example: "This is a key manager for Developers"
      enabled:
        type: boolean
        example: true

  #-----------------------------------------------------
  # The KeyManager resource
  #-----------------------------------------------------
  KeyManagerConfiguration:
    title: Key Manager Configuration
    properties:
      name:
        type: string
        example: "consumer_key"
      label:
        type: string
        example: "Consumer Key"
      type:
        type: string
        example: "select"
      required:
        type: boolean
        example: true
      mask:
        type: boolean
        example: true
      multiple:
        type: boolean
        example: true
      tooltip:
        type: string
        example: "Entet username to connect to key manager"
      default:
        type: object
        example: "admin"
      values:
        type: array
        items:
          type: object

  #-----------------------------------------------------
  # The KeyManager List resource
  #-----------------------------------------------------
  KeyManagerList:
    title: Key Manager List
    properties:
      count:
        type: integer
        description: |
          Number of Key managers returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/KeyManagerInfo'
  #-----------------------------------------------------
  # The Claim Mapping Resource
  #-----------------------------------------------------

  ClaimMappingEntry:
    title: Claim Mapping Configuration
    properties:
      remoteClaim:
        type: string
        example: "http://idp.org/username"
      localClaim:
        type: string
        example: "http://wso2.org/username"

  TokenValidation:
    title: Token handling Configuration
    properties:
      id:
        type: integer
      enable:
        type: boolean
        example: false
        default: true
      type:
        type: string
        enum:
          - REFERENCE
          - JWT
          - CUSTOM
      value:
        type: object

  #-----------------------------------------------------
  # The Scope Settings resource
  #-----------------------------------------------------
  ScopeSettings:
    title: Settings
    properties:
      name:
        type: string
        items:
          type: string


    #----------------------------------------------
  # The Alert list resource.
  #----------------------------------------------
  AlertTypesList:
    title: Alert Types List
    properties:
      count:
        type: integer
        description: The number of alerts
        example: 3
      alerts:
        type: array
        items:
          $ref: '#/definitions/AlertType'

  #----------------------------------------------
  # The AlertType resource.
  #----------------------------------------------
  AlertType:
    title: Alert Type
    properties:
      id:
        type: string
        description: The alert Id
        example: 1
      name:
        type: string
        description: The name of the alert.
        example: "AbnormalRequestTime"

  #-----------------------------------------------
  # The Alerts Subscription resource definition.
  #-----------------------------------------------
  AlertsSubscription:
    title: Alerts Subscription
    properties:
      alerts:
        type: array
        items:
          $ref: '#/definitions/AlertType'
      emailList:
        type: array
        items:
          type: string
          example: "admin@wso2.com"

  #-----------------------------------------------------
  # The Bot Detection Alert Subscription List resource
  #-----------------------------------------------------
  BotDetectionAlertSubscriptionList:
    title: Bot Detection Alert Subscription List
    properties:
      count:
        type: integer
        description: |
          Number of Bot Detection Alert Subscriptions returned.
        example: 3
      list:
        type: array
        items:
          $ref: '#/definitions/BotDetectionAlertSubscription'

  #-----------------------------------------------------
  # The Bot Detection Alert Subscription resource
  #-----------------------------------------------------
  BotDetectionAlertSubscription:
    title: Bot Detection Alert Subscription
    required:
      - email
    properties:
      uuid:
        type: string
        description: UUID of the subscription
        example: "urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65"
      email:
        type: string
        description: email
        example: "abc@.com"

    #-----------------------------------------------------
  # The Workflow List resource
  #-----------------------------------------------------
  WorkflowList:
    title: WorkflowList
    properties:
      count:
        type: integer
        description: |
          Number of workflow processes returned.
        example: 1
      next:
        type: string
        description: |
          Link to the next subset of resources qualified.
          Empty if no more resources are to be returned.
        example: "/workflows?limit=1&offset=2&user="
      previous:
        type: string
        description: |
          Link to the previous subset of resources qualified.
          Empty if current subset is the first subset returned.
        example: "/workflows?limit=1&offset=0&user="
      list:
        type: array
        items:
          $ref: '#/definitions/WorkflowInfo'

  #-----------------------------------------------------
  # The Workflow Info resource
  #-----------------------------------------------------
  WorkflowInfo:
    title: Workflow info object with basic workflow details
    properties:
      workflowType:
        type: string
        enum:
          - APPLICATION_CREATION
          - SUBSCRIPTION_CREATION
          - USER_SIGNUP
          - APPLICATION_REGISTRATION_PRODUCTION
          - APPLICATION_REGISTRATION_SANDBOX
          - APPLICATION_DELETION
          - API_STATE
          - SUBSCRIPTION_DELETION
          - SUBSCRIPTION_UPDATE
        example: APPLICATION_CREATION
        description: |
          Type of the Workflow Request. It shows which type of request is it.
      workflowStatus:
        type: string
        enum:
          - APPROVED
          - CREATED
        example: APPROVED
        description: |
          Show the Status of the the workflow request whether it is approved or created.
      createdTime:
        type: string
        example: '2020-02-10 10:10:19.704'
        description: |
          Time of the the workflow request created.
      updatedTime:
        type: string
        example: '2020-02-10 10:10:19.704'
        description: |
          Time of the the workflow request updated.
      referenceId:
        type: string
        example: '5871244b-d6f3-466e-8995-8accd1e64303'
        description: |
          Workflow external reference is used to identify the workflow requests uniquely.
      properties:
        type: object
      description:
        type: string
        example: 'Approve application [APP1] creation request from application creator - admin with throttling tier - 10MinPer'
        description: |
          description is a message with basic details about the workflow request.

  #-----------------------------------------------------
  # The workflow executor's response resource
  #-----------------------------------------------------
  WorkflowResponse:
    title: workflow Response
    required:
      - workflowStatus
    properties:
      workflowStatus:
        description: |
          This attribute declares whether this workflow task is approved or rejected.
        type: string
        enum:
          - CREATED
          - APPROVED
          - REJECTED
          - REGISTERED
        example: APPROVED
      jsonPayload:
        description: |
          Attributes that returned after the workflow execution
        type: string

  #-----------------------------------------------------
  # The Bot Detection Data List resource
  #-----------------------------------------------------
  BotDetectionDataList:
    title: Bot Detection Data List
    properties:
      count:
        type: integer
        description: |
          Number of Bot Detection Data returned.
        example: 1
      list:
        type: array
        items:
          $ref: '#/definitions/BotDetectionData'

  #-----------------------------------------------------
  # The Bot Detection Data resource
  #-----------------------------------------------------
  BotDetectionData:
    title: Bot Detection Data
    properties:
      recordedTime:
        type: integer
        format: int64
        description: The time of detection
        example: 1591734138413
      messageID:
        type: string
        description: The message ID
        example: 'urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65'
      apiMethod:
        type: string
        description: The api method
        example: 'GET'
      headerSet:
        type: string
        description: The header set
        example: '[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]'
      messageBody:
        type: string
        description: The content of the message body
        example: '<soapenv:Body xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>'
      clientIp:
        type: string
        description: The IP of the client
        example: '127.0.0.1'

  #-----------------------------------------------
  # The Role Alias resource definition.
  #-----------------------------------------------
  RoleAliasList:
    title: Role alias list
    properties:
      count:
        type: integer
        description: The number of role aliases
        example: 3
      list:
        type: array
        items:
          $ref: '#/definitions/RoleAlias'

  #-----------------------------------------------
  # The Role Alias resource definition.
  #-----------------------------------------------
  RoleAlias:
    title: Role alias
    properties:
      role:
        type: string
        description: The original role
        example: "Internal/subscriber"
      aliases:
        schema:
          type: array
          items:
            type: string
        description: The role mapping for role alias
        example: ["Subscriber","Internal/subscriber"]

#-----------------------------------------------------
# END-OF-FILE
#-----------------------------------------------------
